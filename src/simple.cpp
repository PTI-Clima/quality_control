//#' @author
//#' Borja Latorre Garcés \url{http://eead.csic.es/home/staffinfo?Id=215}; Suelo y Agua, EEAD, CSIC \url{http://www.eead.csic.es}
//#' Fergus Reig Gracia \url{http://fergusreig.es}; Environmental Hydrology, Climate and Human Activity Interactions, Geoenvironmental Processes, IPE, CSIC \url{http://www.ipe.csic.es/hidrologia-ambiental}
//#'
//#' @details
//#' \tabular{ll}{
//#'   Version: \tab 1.0.0\cr
//#'   License: \tab GPL version 3 or newer\cr
//#' }
//#'
//#' @description
//#' Detecta duplicados

#include <stdio.h>
#include <stdlib.h>
#include <Rcpp.h>

using namespace Rcpp;



// @param fileOpen fichero a tratar
// @param min mínimo número de valores (según si se tienen uno o más datos diarios)
// @param max máximo número de valores
// @param ncol número de columnas del fichero fileOpen
// @return duplicados

// [[Rcpp::export]]
std::string main_deteccion_duplicados(const char * fileOpen, double min, double max, int ncol)
{
	int i, j, k, k1, n = 0;
	size_t aux;
	short *data, *c1, *c2, *c11, *c21;
	unsigned long eqi, eq = 0;
	std::string alleq ="";

    FILE *fp = fopen(fileOpen, "r");
	aux = fread(&n, sizeof(int), 1, fp);
	data = (short *)calloc(n+1, sizeof(short));
	aux = fread(data, sizeof(short), n, fp);
    fclose(fp);

	n = n / ncol;
	for(j=0; j<n; j++)
	{
		eqi = 0;
		c1 = data + j * ncol;
		c2 = c1 + ncol;
		for(i=j+1; i<n; i++)
		{
				c11 = c1;
				c21 = c2;
				if(ncol==32){
				 	k  = (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++);
				}else{//ncol=125
					k  = (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++) + (*c1++ == *c2++) +
					 (*c1++ == *c2++);
				}

			if((k > (min+1)) && (k < (max+1)))
			{
				if(ncol==32){
					k1  = ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++));
				}else{//ncol=125
					k1  = ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
 						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
 						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
 						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
 						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
 						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
 						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++)) +
 						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
						 ((*c11 != -999) & (*c11++ == *c21++)) +
	 					 ((*c11 != -999) & (*c11++ == *c21++));
				}
				if((k1 > (min+1)) && (k1 < (max+1)))
				{
					// printf("k1 %d k %d j %d i %d\n", k1, k, j, i);
					if((eqi==0) & (eq>0)){
						alleq = alleq + ";";
					}
					if(eqi==0){
						alleq = alleq + std::to_string(j) + "=" + std::to_string(i);
					}
					if(eqi>0){
						alleq = alleq + "," + std::to_string(i);
					}
					eq++;
					eqi++;
				}
			}

			c1 = c1 - ncol;
		}
	}

	return alleq;
}
